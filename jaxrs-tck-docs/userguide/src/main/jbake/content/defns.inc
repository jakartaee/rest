// NOTE TO WRITERS:
// Most technologies will only need the compatibility rules in rules.adoc.
// Some technologies will need additional definitions to go with additional
// rules.  If they're needed, remove the comment characters below
// and update the definitions as appropriate.
//
// The first block below is additional definitions needed by
// Jakarta XML Web Services.
//
// The second block below is additional defintions needed by
// Jakarta Server Pages.
//
// NOTE: This set of examples is NOT complete, but should be.
//
//
// Jakarta XML Web Services
//
// |Development Kit |A software product that implements or incorporates a
// Compiler, a Schema Compiler, a Schema Generator, a Java-to-WSDL Tool, a
// WSDL-to-Java Tool, and/or an RMI Compiler.
//
// |Java-to-WSDL Output |Output of a Java-to-WSDL Tool that is required for
// Web service deployment and invocation.
//
// |Java-to-WSDL Tool |A software development tool that implements or
// incorporates a function that generates web service endpoint descriptions
// in WSDL and XML schema format from Source Code as specified by the
// Jakarta XML Web Services Specification.
//
// |WSDL-to-Java Output |Output of a WSDL-to-Java tool that is required for
// Web service deployment and invocation.
//
// |WSDL-to-Java Tool |A software development tool that implements or
// incorporates a function that generates web service interfaces for
// clients and endpoints from a WSDL description as specified by the
// Jakarta XML Web Services Specification.
//
//
// Jakarta Server Pages
//
// |Jakarta Server Page |A text-based document that uses Jakarta Server
// Pages technology.
//
// |Jakarta Server Page Implementation Class |A program constructed by
// transforming the Jakarta Server Page text into a Java language program
// using the transformation rules described in the Specifications.
